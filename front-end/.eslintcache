[{"/Users/amandahayes/SEIR/dnd-encounters-2021/front-end/src/reportWebVitals.js":"1","/Users/amandahayes/SEIR/dnd-encounters-2021/front-end/src/App.js":"2","/Users/amandahayes/SEIR/dnd-encounters-2021/front-end/src/index.js":"3","/Users/amandahayes/SEIR/dnd-encounters-2021/front-end/src/Components/CreateCharacterForm.js":"4","/Users/amandahayes/SEIR/dnd-encounters-2021/front-end/src/Components/UpdateCharacterForm.js":"5","/Users/amandahayes/SEIR/dnd-encounters-2021/front-end/src/Components/GenerateChar.js":"6","/Users/amandahayes/SEIR/dnd-encounters-2021/front-end/src/Components/CharDetails.js":"7","/Users/amandahayes/SEIR/dnd-encounters-2021/front-end/src/Components/Characters.js":"8","/Users/amandahayes/SEIR/dnd-encounters-2021/front-end/src/Components/GetRandom.js":"9"},{"size":362,"mtime":1609205093329,"results":"10","hashOfConfig":"11"},{"size":1231,"mtime":1609615233090,"results":"12","hashOfConfig":"11"},{"size":540,"mtime":1609383362658,"results":"13","hashOfConfig":"11"},{"size":3922,"mtime":1609570184624,"results":"14","hashOfConfig":"11"},{"size":3958,"mtime":1609570218298,"results":"15","hashOfConfig":"11"},{"size":1407,"mtime":1609617311436,"results":"16","hashOfConfig":"11"},{"size":997,"mtime":1609610697766,"results":"17","hashOfConfig":"11"},{"size":3129,"mtime":1609617940056,"results":"18","hashOfConfig":"11"},{"size":665,"mtime":1609616860519,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"kewybn",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"22"},"/Users/amandahayes/SEIR/dnd-encounters-2021/front-end/src/reportWebVitals.js",[],["45","46"],"/Users/amandahayes/SEIR/dnd-encounters-2021/front-end/src/App.js",[],"/Users/amandahayes/SEIR/dnd-encounters-2021/front-end/src/index.js",[],"/Users/amandahayes/SEIR/dnd-encounters-2021/front-end/src/Components/CreateCharacterForm.js",["47"],"import { useRef } from 'react';\nimport '../App.css';\n\nconst CreateCharacterForm = (props) => {\n    const nameInput = useRef(null);\n    const pronounsInput = useRef(null);\n    const raceSelect = useRef(null);\n    const characterClassSelect = useRef(null);\n    const hpSelect = useRef(null);\n    const attackSelect = useRef(null);\n    const weaponSelect = useRef(null);\n    const catchphrasesSelect = useRef(null);\n\n    const createCharacter = async (event) => {\n        event.preventDefault()\n        const name = nameInput.current.value;\n        const pronouns = pronounsInput.current.value;\n        const race = raceSelect.current.value;\n        const characterClass = characterClassSelect.current.value;\n        const hp = hpSelect.current.value;\n        const attack = attackSelect.current.value;\n        const weapon = weaponSelect.current.value;\n        const catchphrases = catchphrasesSelect.current.value;\n        const body = JSON.stringify({ name, pronouns, race, characterClass, hp, attack, weapon, catchphrases });\n\n        event.currentTarget.reset();\n\n        try {\n            const response = await fetch('http://localhost:7000/characters', {\n                method: 'POST',\n                headers: {\n                    'Content-type': 'application/json'\n                },\n                body\n            });\n\n            props.history.push('/Characters');\n\n        } catch (error) {\n            console.error(error)\n        };\n    }\n\n    return (\n        <form onSubmit={createCharacter} method=\"post\">\n            <label>Character Name:</label>\n            <input type=\"text\" name=\"name\" ref={nameInput} />\n            <br />\n            <label>Character Pronouns:</label>\n            <input type=\"text\" name=\"pronouns\" ref={pronounsInput} />\n            <br />\n            <label>Race:</label> \n            <select className=\"select\" ref={raceSelect}>\n                <option value=\"Human\">Human</option>\n                <option value=\"Half Elf\">Elf</option>\n                <option value=\"Gnome\">Gnome</option>\n                <option value=\"Half Orc\">Half Orc</option>\n            </select>\n            <br />\n            <label>Class:</label>\n             <select className=\"select\" ref={characterClassSelect}>\n                <option value=\"Fighter\">Fighter (Tank)</option>\n                <option value=\"Wizard\">Wizard (DPS)</option>\n                <option value=\"Rogue\">Rogue (stabby stabby)</option>\n                <option value=\"Cleric\">Cleric (Healer)</option>\n            </select>\n            <br />\n            <label>HP:</label> \n            <select className=\"select\" ref={hpSelect}>\n                <option value=\"Default\">12</option>\n            </select>\n            <br />\n            <label>Attack:</label> \n            <select className=\"select\" ref={attackSelect}>\n                <option value=\"Sword Slash\">Sword Slash</option>\n                <option value=\"Magic Missile\">Magic Missile</option>\n                <option value=\"Shoryukem\">Shoryuken</option>\n            </select>\n            <br />\n            <label>Weapon:</label> \n            <select className=\"select\" ref={weaponSelect}>\n                <option value=\"Sword Slash\">Sword</option>\n                <option value=\"Magic Missile\">Wand</option>\n                <option value=\"Shoryukem\">Dagger</option>\n            </select>\n            <br />\n            <label>Catchphrases:</label> \n            <select className=\"select\" ref={catchphrasesSelect}>\n                <option value=\"Let's Do This!\">'Let's Do This!'</option>\n                <option value=\"Can't we ever just have a normal field trip?\">'Can't we ever just have a normal field trip?'</option>\n                <option value=\"Screw it, we're Gods!\">'Screw it, we're Gods!'</option>\n            </select>\n            <br />\n            <input type=\"submit\" value=\"Create Character\" />\n        </form>\n    )\n};\nexport default CreateCharacterForm;","/Users/amandahayes/SEIR/dnd-encounters-2021/front-end/src/Components/UpdateCharacterForm.js",["48"],"import { useRef } from 'react';\nimport '../App.css';\nimport { useRouteMatch } from \"react-router-dom\";\n\nconst UpdateCharacterForm = (props) => {\n    const updateNameInput = useRef(null);\n    const updatePronounsInput = useRef(null);\n    const updateRaceSelect = useRef(null);\n    const updateCharacterClassSelect = useRef(null);\n    const updateHpSelect = useRef(null);\n    const updateAttackSelect = useRef(null);\n    const updateCatchphrasesSelect = useRef(null);\n\n    const characterDetailRouteMatch = useRouteMatch(\"/UpdateCharacterForm/:id\");\n    const charId = characterDetailRouteMatch.params.id;\n\n    const updateCharacter = async (event) => {\n        event.preventDefault()\n        const name = updateNameInput.current.value;\n        const pronouns = updatePronounsInput.current.value;\n        const race = updateRaceSelect.current.value;\n        const characterClass = updateCharacterClassSelect.current.value;\n        const hp = updateHpSelect.current.value;\n        const attack = updateAttackSelect.current.value;\n        const catchphrases = updateCatchphrasesSelect.current.value;\n        const body = JSON.stringify({ name, pronouns, race, characterClass, hp, attack, catchphrases });\n\n\n        event.currentTarget.reset();\n\n        try {\n            const response = await fetch(`http://localhost:7000/characters/${charId}`, {\n                method: 'PUT',\n                headers: {\n                    'Content-type': 'application/json'\n                },\n                body: body\n            });\n\n            props.history.push('/Characters');\n\n        } catch (error) {\n            console.error(error)\n        }\n    };\n\n    return (\n        <>\n            <h2>Update Character</h2>\n            <form onSubmit={updateCharacter}>\n                <label>Name:</label> <input type=\"text\" name=\"name\" ref={updateNameInput} />\n                <br />\n                <label>Pronouns:</label> <input type=\"text\" name=\"pronouns\" ref={updatePronounsInput} />\n                <br />\n                <label>Race:</label> \n                <select className=\"select\"ref={updateRaceSelect}>\n                    <option value=\"Human\">Human</option>\n                    <option value=\"Half Elf\">Elf</option>\n                    <option value=\"Gnome\">Gnome</option>\n                    <option value=\"Half Orc\">Half Orc</option>\n                </select>\n                <br />\n                <label>Class:</label> \n                <select className=\"select\" ref={updateCharacterClassSelect}>\n                    <option value=\"Fighter\">Fighter (Tank)</option>\n                    <option value=\"Wizard\">Wizard (DPS)</option>\n                    <option value=\"Rogue\">Rogue (stabby stabby)</option>\n                    <option value=\"Cleric\">Cleric (Healer)</option>\n                </select>   \n                <br />\n                <label> HP:</label>\n                <select className=\"select\"ref={updateHpSelect}>\n                    <option value=\"Default\">12</option>\n                </select>\n                <br />\n                <label> Attack: </label>\n                <select className=\"select\" ref={updateAttackSelect}>\n                    <option value=\"Default\">Sword Slash</option>\n                    <option value=\"Default\">Magic Missile</option>\n                    <option value=\"Default\">Shoryuken</option>\n                </select>\n                <br />\n                <label> Catchphrases:</label> \n                <select className=\"select\" ref={updateCatchphrasesSelect}>\n                    <option value=\"Default\">'Let's Do This!'</option>\n                    <option value=\"Default\">'Can't we ever just have a normal field trip?'</option>\n                    <option value=\"Default\">'Screw it, we're practically Gods!'</option>\n                </select>\n                <br />\n                <input type=\"submit\" value=\"Update Character\" />\n            </form>\n        </>\n    )\n};\n\nexport default UpdateCharacterForm;","/Users/amandahayes/SEIR/dnd-encounters-2021/front-end/src/Components/GenerateChar.js",["49"],"import { useState, useEffect } from 'react';\nimport '../App.css';\n\n\nfunction GenerateCharComponent(props) {\n  const [randomCharacters, setRandomCharacters] = useState([]);\n\n  const fetchRandomCharacters = async () => {\n    try {\n      const response = await fetch('http://localhost:7000/randomChar');\n      const data = await response.json();\n      setRandomCharacters(data);\n      console.log(data);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const generateChar = async () => {\n    const randomIndex = Math.round(Math.random() * (randomCharacters.length - 1));\n    const generatedCharacter = randomCharacters[randomIndex];\n\n    try {\n      const response = await fetch(\"http://localhost:7000/characters\", {\n        method: 'POST',\n        headers: {\n          'Content-type': 'application/json',\n        },\n        body: JSON.stringify(generatedCharacter)\n      });\n      console.log(generatedCharacter);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  function handleClick(e) {\n    e.preventDefault();\n    generateChar();\n  }\n\n  useEffect(() => { \n    fetchRandomCharacters()\n  }, []);\n\n  return (\n    <div>\n      <h2>Generate a random character for me</h2>\n      <button onClick={handleClick}\n      >Generate</button>\n      <h2>Heres your char</h2>\n      <li>\n      {/* {generatedCharacter.name} */}\n      </li>\n    </div>\n  )\n}\nexport default GenerateCharComponent;\n\n\n","/Users/amandahayes/SEIR/dnd-encounters-2021/front-end/src/Components/CharDetails.js",["50","51"],"import '../App.css';\nimport { useState, useEffect } from 'react';\nimport { useRouteMatch } from \"react-router-dom\";\n\nfunction CharacterStats() {\n  const [character, setCharacter] = useState({});\n  const characterDetailRouteMatch = useRouteMatch(\"/Characters/:id\");\n\n  const fetchCharacter = async () => {\n    try {\n        const response = await fetch(`http://localhost:7000/Characters/${characterDetailRouteMatch.params.id}`);\n        const data = await response.json();\n        setCharacter(data);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  useEffect(() => { fetchCharacter() }, []);\n\n  return (\n    <div>\n      <h1>Character Details</h1>\n      {character.name}<br />\n      {character.race}<br />\n      {character.pronouns}<br />\n      {character.characterClass}<br />\n      {character.hp}<br />\n      {character.weapon}<br />\n      {character.attack}<br />\n      {character.catchphrases}<br />\n      <img src=\"./rand.jpg\" />\n    </div>\n  )\n}\n\nexport default CharacterStats;","/Users/amandahayes/SEIR/dnd-encounters-2021/front-end/src/Components/Characters.js",["52"],"import '../App.css';\nimport { useState, useEffect } from 'react';\nimport { Link } from \"react-router-dom\";\n\n\nfunction AllCharPage() {\n  const [characters, setCharacters] = useState([]);\n\n  const fetchCharacters = async () => {\n    try {\n      const response = await fetch('http://localhost:7000/characters');\n      const data = await response.json();\n      setCharacters(data);\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  const deleteCharacter = async (id) => {\n    try {\n      const response = await fetch(`http://localhost:7000/characters/${id}`, {\n        method: 'DELETE',\n        headers: {\n          'Content-type': 'application/json',\n        }\n      });\n\n      const data = await response.json();\n      const filteredCharacters = characters.filter(character => character._id !== data._id);\n      setCharacters(filteredCharacters);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // GENERATE A NEW CHARACTER\n\n    const [randomCharacters, setRandomCharacters] = useState([]);\n  \n    const fetchRandomCharacters = async () => {\n      try {\n        const response = await fetch('http://localhost:7000/randomChar');\n        const data = await response.json();\n        setRandomCharacters(data);\n        console.log(data);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n  \n    const generateChar = async () => {\n      const randomIndex = Math.round(Math.random() * (randomCharacters.length - 1));\n      const generatedCharacter = randomCharacters[randomIndex];\n  \n      try {\n        const response = await fetch(\"http://localhost:7000/characters\", {\n          method: 'POST',\n          headers: {\n            'Content-type': 'application/json',\n          },\n          body: JSON.stringify(generatedCharacter)\n        });\n        console.log(generatedCharacter);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n  \n    function handleClick(e) {\n      e.preventDefault();\n      generateChar();\n    }\n\n\n  useEffect(() => {\n    fetchCharacters()\n    fetchRandomCharacters()\n  }, []);\n\n  return (\n    \n    <div>\n      <h1>My Characters</h1>\n      <p>View and manage all your characters, or create a new one.</p>\n      <ul>\n        <>\n      {\n        characters.map(character => {\n          return (\n            <li key={character._id}>\n             {character.name}\n             <br />\n              <button type=\"button\">\n              <Link to={`characters/${character._id}`}>VIEW</Link>\n              </button>\n              <button>\n              <Link to={`/UpdateCharacterForm/${character._id}`}>EDIT</Link>\n              </button>\n\n              <button onClick={\n                  (event) => {\n                    deleteCharacter(character._id)\n                  }\n                }>DELETE </button>\n            </li>\n          )\n        })\n      }\n      </>\n      </ul>\n      <div>\n      <h2>Generate a random character for me</h2>\n      <button onClick={handleClick}\n      >Generate</button>\n      </div>\n\n      <Link to=\"/CreateCharacterForm\">\n      <button>Create New Character</button>\n      </Link>\n    </div>\n  )\n}\n\nexport default AllCharPage;","/Users/amandahayes/SEIR/dnd-encounters-2021/front-end/src/Components/GetRandom.js",["53"],"import { useState, useEffect } from 'react';\nimport '../App.css';\n\nfunction GetRandom(props) {\n    const [randomChars, setRandomCharacters] = useState([]);\n  \n    const fetchRandomCharacters = async () => {\n      try {\n        const response = await fetch('http://localhost:7000/randomchar');\n        const data = await response.json();\n        setRandomCharacters(data);\n        console.log(data);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    useEffect(() => { \n        fetchRandomCharacters()\n      }, []);\n\n     \n      return (\n        <div>\n          <h1>Hey</h1>\n\n        </div>\n      )\n      \n\n    }\n\n    export default GetRandom;",{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","severity":1,"message":"59","line":29,"column":19,"nodeType":"60","messageId":"61","endLine":29,"endColumn":27},{"ruleId":"58","severity":1,"message":"59","line":32,"column":19,"nodeType":"60","messageId":"61","endLine":32,"endColumn":27},{"ruleId":"58","severity":1,"message":"59","line":24,"column":13,"nodeType":"60","messageId":"61","endLine":24,"endColumn":21},{"ruleId":"62","severity":1,"message":"63","line":19,"column":41,"nodeType":"64","endLine":19,"endColumn":43,"suggestions":"65"},{"ruleId":"66","severity":1,"message":"67","line":32,"column":7,"nodeType":"68","endLine":32,"endColumn":31},{"ruleId":"58","severity":1,"message":"59","line":56,"column":15,"nodeType":"60","messageId":"61","endLine":56,"endColumn":23},{"ruleId":"58","severity":1,"message":"69","line":5,"column":12,"nodeType":"60","messageId":"61","endLine":5,"endColumn":23},"no-native-reassign",["70"],"no-negated-in-lhs",["71"],"no-unused-vars","'response' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchCharacter'. Either include it or remove the dependency array.","ArrayExpression",["72"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'randomChars' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"73","fix":"74"},"Update the dependencies array to be: [fetchCharacter]",{"range":"75","text":"76"},[602,604],"[fetchCharacter]"]