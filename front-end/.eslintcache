[{"/Users/amandahayes/SEIR/dnd-encounters-2021/front-end/src/reportWebVitals.js":"1","/Users/amandahayes/SEIR/dnd-encounters-2021/front-end/src/App.js":"2","/Users/amandahayes/SEIR/dnd-encounters-2021/front-end/src/index.js":"3","/Users/amandahayes/SEIR/dnd-encounters-2021/front-end/src/Components/CreateCharacterForm.js":"4","/Users/amandahayes/SEIR/dnd-encounters-2021/front-end/src/Components/UpdateCharacterForm.js":"5","/Users/amandahayes/SEIR/dnd-encounters-2021/front-end/src/Components/GenerateChar.js":"6","/Users/amandahayes/SEIR/dnd-encounters-2021/front-end/src/Components/CharDetails.js":"7","/Users/amandahayes/SEIR/dnd-encounters-2021/front-end/src/Components/Characters.js":"8","/Users/amandahayes/SEIR/dnd-encounters-2021/front-end/src/Components/GetRandom.js":"9","/Users/amandahayes/SEIR/dnd-encounters-2021/front-end/src/Components/Battle.js":"10"},{"size":362,"mtime":1609205093329,"results":"11","hashOfConfig":"12"},{"size":1219,"mtime":1609630900283,"results":"13","hashOfConfig":"12"},{"size":540,"mtime":1609383362658,"results":"14","hashOfConfig":"12"},{"size":4249,"mtime":1609641232496,"results":"15","hashOfConfig":"12"},{"size":4265,"mtime":1609634339562,"results":"16","hashOfConfig":"12"},{"size":1313,"mtime":1609637259229,"results":"17","hashOfConfig":"12"},{"size":1032,"mtime":1609634609815,"results":"18","hashOfConfig":"12"},{"size":4125,"mtime":1609640933208,"results":"19","hashOfConfig":"12"},{"size":665,"mtime":1609616860519,"results":"20","hashOfConfig":"12"},{"size":2695,"mtime":1609646256897,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"kewybn",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/amandahayes/SEIR/dnd-encounters-2021/front-end/src/reportWebVitals.js",[],["47","48"],"/Users/amandahayes/SEIR/dnd-encounters-2021/front-end/src/App.js",[],"/Users/amandahayes/SEIR/dnd-encounters-2021/front-end/src/index.js",[],"/Users/amandahayes/SEIR/dnd-encounters-2021/front-end/src/Components/CreateCharacterForm.js",["49"],"/Users/amandahayes/SEIR/dnd-encounters-2021/front-end/src/Components/UpdateCharacterForm.js",["50"],"import { useRef } from 'react';\nimport '../App.css';\nimport { useRouteMatch } from \"react-router-dom\";\n\nconst UpdateCharacterForm = (props) => {\n    const updateNameInput = useRef(null);\n    const updatePronounsInput = useRef(null);\n    const updateRaceSelect = useRef(null);\n    const updateCharacterClassSelect = useRef(null);\n    const updateHpSelect = useRef(null);\n    const updateAttackSelect = useRef(null);\n    const updateArmorClass = useRef(null);\n    const updateCatchphrasesSelect = useRef(null);\n\n    const characterDetailRouteMatch = useRouteMatch(\"/UpdateCharacterForm/:id\");\n    const charId = characterDetailRouteMatch.params.id;\n\n    const updateCharacter = async (event) => {\n        event.preventDefault()\n        const name = updateNameInput.current.value;\n        const pronouns = updatePronounsInput.current.value;\n        const race = updateRaceSelect.current.value;\n        const characterClass = updateCharacterClassSelect.current.value;\n        const hp = updateHpSelect.current.value;\n        const attack = updateAttackSelect.current.value;\n        const armorClass = updateArmorClass.current.value;\n        const catchphrases = updateCatchphrasesSelect.current.value;\n        const body = JSON.stringify({ name, pronouns, race, characterClass, hp, attack, armorClass, catchphrases });\n\n\n        event.currentTarget.reset();\n\n        try {\n            const response = await fetch(`http://localhost:7000/characters/${charId}`, {\n                method: 'PUT',\n                headers: {\n                    'Content-type': 'application/json'\n                },\n                body: body\n            });\n\n            props.history.push('/Characters');\n\n        } catch (error) {\n            console.error(error)\n        }\n    };\n\n    return (\n        <>\n            <h2>Update Character</h2>\n            <form onSubmit={updateCharacter}>\n                <label>Name:</label> <input type=\"text\" name=\"name\" ref={updateNameInput} />\n                <br />\n                <label>Pronouns:</label> <input type=\"text\" name=\"pronouns\" ref={updatePronounsInput} />\n                <br />\n                <label>Race:</label> \n                <select className=\"select\"ref={updateRaceSelect}>\n                    <option value=\"Human\">Human</option>\n                    <option value=\"Half Elf\">Elf</option>\n                    <option value=\"Gnome\">Gnome</option>\n                    <option value=\"Half Orc\">Half Orc</option>\n                </select>\n                <br />\n                <label>Class:</label> \n                <select className=\"select\" ref={updateCharacterClassSelect}>\n                    <option value=\"Fighter\">Fighter (Tank)</option>\n                    <option value=\"Wizard\">Wizard (DPS)</option>\n                    <option value=\"Rogue\">Rogue (stabby stabby)</option>\n                    <option value=\"Cleric\">Cleric (Healer)</option>\n                </select>   \n                <br />\n                <label> HP:</label>\n                <select className=\"select\"ref={updateHpSelect}>\n                    <option value=\"Default\">12</option>\n                </select>\n                <br />\n                <label> Attack: </label>\n                <select className=\"select\" ref={updateAttackSelect}>\n                    <option value=\"Default\">Sword Slash</option>\n                    <option value=\"Default\">Magic Missile</option>\n                    <option value=\"Default\">Shoryuken</option>\n                </select>\n                <br />\n                <label> Armor Class:</label>\n                <select className=\"select\"ref={updateArmorClass}>\n                    <option value=\"Default\">15</option>\n                </select>\n                <label> Catchphrases:</label> \n                <select className=\"select\" ref={updateCatchphrasesSelect}>\n                    <option value=\"Default\">'Let's Do This!'</option>\n                    <option value=\"Default\">'Can't we ever just have a normal field trip?'</option>\n                    <option value=\"Default\">'Screw it, we're practically Gods!'</option>\n                </select>\n                <br />\n                <input type=\"submit\" value=\"Update Character\" />\n            </form>\n        </>\n    )\n};\n\nexport default UpdateCharacterForm;","/Users/amandahayes/SEIR/dnd-encounters-2021/front-end/src/Components/GenerateChar.js",["51"],"/Users/amandahayes/SEIR/dnd-encounters-2021/front-end/src/Components/CharDetails.js",["52","53"],"import '../App.css';\nimport { useState, useEffect } from 'react';\nimport { useRouteMatch } from \"react-router-dom\";\n\nfunction CharacterStats() {\n  const [character, setCharacter] = useState({});\n  const characterDetailRouteMatch = useRouteMatch(\"/Characters/:id\");\n\n  const fetchCharacter = async () => {\n    try {\n        const response = await fetch(`http://localhost:7000/characters/${characterDetailRouteMatch.params.id}`);\n        const data = await response.json();\n        setCharacter(data);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  useEffect(() => { fetchCharacter() }, []);\n\n  return (\n    <div>\n      <h1>Character Details</h1>\n      {character.name}<br />\n      {character.race}<br />\n      {character.pronouns}<br />\n      {character.characterClass}<br />\n      {character.hp}<br />\n      {character.weapon}<br />\n      {character.attack}<br />\n      {character.armorClass}<br />\n      {character.catchphrases}<br />\n      <img src=\"./rand.jpg\" />\n    </div>\n  )\n}\n\nexport default CharacterStats;","/Users/amandahayes/SEIR/dnd-encounters-2021/front-end/src/Components/Characters.js",["54"],"/Users/amandahayes/SEIR/dnd-encounters-2021/front-end/src/Components/GetRandom.js",["55"],"import { useState, useEffect } from 'react';\nimport '../App.css';\n\nfunction GetRandom(props) {\n    const [randomChars, setRandomCharacters] = useState([]);\n  \n    const fetchRandomCharacters = async () => {\n      try {\n        const response = await fetch('http://localhost:7000/randomchar');\n        const data = await response.json();\n        setRandomCharacters(data);\n        console.log(data);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    useEffect(() => { \n        fetchRandomCharacters()\n      }, []);\n\n     \n      return (\n        <div>\n          <h1>Hey</h1>\n\n        </div>\n      )\n      \n\n    }\n\n    export default GetRandom;",["56","57"],"/Users/amandahayes/SEIR/dnd-encounters-2021/front-end/src/Components/Battle.js",["58","59","60"],{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","severity":1,"message":"66","line":32,"column":19,"nodeType":"67","messageId":"68","endLine":32,"endColumn":27},{"ruleId":"65","severity":1,"message":"66","line":34,"column":19,"nodeType":"67","messageId":"68","endLine":34,"endColumn":27},{"ruleId":"65","severity":1,"message":"66","line":24,"column":13,"nodeType":"67","messageId":"68","endLine":24,"endColumn":21},{"ruleId":"69","severity":1,"message":"70","line":19,"column":41,"nodeType":"71","endLine":19,"endColumn":43,"suggestions":"72"},{"ruleId":"73","severity":1,"message":"74","line":33,"column":7,"nodeType":"75","endLine":33,"endColumn":31},{"ruleId":"65","severity":1,"message":"66","line":66,"column":15,"nodeType":"67","messageId":"68","endLine":66,"endColumn":23},{"ruleId":"65","severity":1,"message":"76","line":5,"column":12,"nodeType":"67","messageId":"68","endLine":5,"endColumn":23},{"ruleId":"61","replacedBy":"77"},{"ruleId":"63","replacedBy":"78"},{"ruleId":"65","severity":1,"message":"79","line":3,"column":10,"nodeType":"67","messageId":"68","endLine":3,"endColumn":14},{"ruleId":"65","severity":1,"message":"80","line":7,"column":12,"nodeType":"67","messageId":"68","endLine":7,"endColumn":31},{"ruleId":"65","severity":1,"message":"81","line":20,"column":11,"nodeType":"67","messageId":"68","endLine":20,"endColumn":35},"no-native-reassign",["82"],"no-negated-in-lhs",["83"],"no-unused-vars","'response' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchCharacter'. Either include it or remove the dependency array.","ArrayExpression",["84"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'randomChars' is assigned a value but never used.",["82"],["83"],"'Link' is defined but never used.","'nonPlayerCharacters' is assigned a value but never used.","'fetchNonPlayerCharacters' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"85","fix":"86"},"Update the dependencies array to be: [fetchCharacter]",{"range":"87","text":"88"},[602,604],"[fetchCharacter]"]